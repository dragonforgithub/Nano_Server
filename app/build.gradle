apply plugin: 'com.android.application'

android {
    compileSdkVersion 27
    defaultConfig {
        applicationId "com.example.administrator.nano_server"
        minSdkVersion 19
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        // 使用Cmake工具
        externalNativeBuild {
            cmake {
                cppFlags ""
                //生成多个版本的so文件
                abiFilters 'armeabi-v7a' //,'arm64-v8a','x86','x86_64'
            }
        }
    }

    // 配置CMakeLists.txt路径
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt" //编译脚本
        }
    }

    packagingOptions { //For Error: More than one file was found with OS independent path
        pickFirst 'lib/armeabi-v7a/libnano_opensles.so'
    }
    buildTypes {
        release {
            zipAlignEnabled false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            zipAlignEnabled false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    signingConfigs {
        releaseConfig {
            keyAlias 'SignDemo'
            keyPassword '123456'
            storeFile file('E:\\project\\androidStudio\\signAPK\\SignDemo.jks')
            storePassword '123456'
        }
    }

    //自定义apk名称含版本号信息
    android.applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def fileName = "IMS_Demo_${defaultConfig.versionCode}-${defaultConfig.versionName}-${releaseTime()}.apk"
            //def fileName = outputFile.name.replace("app", "${rootProject.ext.appName}-${releaseTime()}-${defaultConfig.versionCode}-${defaultConfig.versionName}")
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                //这里修改apk文件名
                outputFileName = fileName
            }
        }
    }
}

//获取编译时间
def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

repositories {
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    //implementation fileTree(include: ['*.jar','*.aar'] , dir: 'libs')
    //implementation(name: 'RemoteServiceLib_1-1.0-2018-08-07', ext: 'aar')
    implementation project(':remoteservicecontract')
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}
